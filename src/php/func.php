<?php
/**
 * Parse the Message Inbound For Emojis
 *
 * @param string $txt
 * The received message, where to find the Emojis.
 *
 * @param boolean $span
 * If "true", the function will return an html tag
 * Example: <span class="emoji" id="emoji-1F604"></span>
 * this will show the smiling face, require emojisprite.css and emojisprite.jpg
 *
 * Otherwise, if it is "false", return an id. Example, ##1F604##.
 *
 * @return string
 */
function ParseMessageInboundForEmojis($txt, $span) {
	$emojis = array("1F604", "1F603", "1F600", "1F60A", "263A", "1F609", "1F60D", "1F618", "1F61A", "1F617", "1F619", "1F61C", "1F61D", "1F61B", "1F633", "1F601", "1F614", "1F60C", "1F612", "1F61E", "1F623","1F622", "1F602", "1F62D", "1F62A", "1F625", "1F630", "1F605", "1F613", "1F629", "1F62B", "1F628", "1F631", "1F620", "1F621", "1F624", "1F616", "1F606", "1F60B", "1F637", "1F60E", "1F634", "1F635", "1F632", "1F61F", "1F626", "1F627", "1F608", "1F47F", "1F62E", "1F62C", "1F610", "1F615", "1F62F", "1F636", "1F607", "1F60F", "1F611", "1F472", "1F473", "1F46E", "1F477", "1F482", "1F476", "1F466", "1F467", "1F468", "1F469", "1F474", "1F475", "1F471", "1F47C", "1F478", "1F63A", "1F638", "1F63B", "1F63D", "1F63C", "1F640", "1F63F", "1F639", "1F63E", "1F479", "1F47A","1F648", "1F649", "1F64A", "1F480", "1F47D", "1F4A9", "1F525", "2728", "1F31F", "1F4AB", "1F4A5", "1F4A2", "1F4A6", "1F4A7", "1F4A4", "1F4A8", "1F442", "1F440", "1F443", "1F445", "1F444",
         		"1F44D", "1F44E", "1F44C", "1F44A", "270A", "270C", "1F44B", "270B", "1F450", "1F446", "1F447", "1F449", "1F448", "1F64C", "1F64F", "261D", "1F44F", "1F4AA", "1F6B6", "1F3C3", "1F483", "1F46B", "1F46A", "1F46C", "1F46D", "1F48F", "1F491", "1F46F", "1F646", "1F645", "1F481", "1F64B", "1F486", "1F487", "1F485", "1F470", "1F64E", "1F64D", "1F647", "1F3A9", "1F451", "1F452", "1F45F", "1F45E", "1F461", "1F460", "1F462", "1F455", "1F454", "1F45A", "1F457", "1F3BD", "1F456", "1F458", "1F459", "1F4BC", "1F45C", "1F45D", "1F45B", "1F453", "1F380", "1F302", "1F484", "1F49B", "1F499", "1F49C", "1F49A", "2764", "1F494", "1F497", "1F493", "1F495", "1F496", "1F49E", "1F498", "1F48C", "1F48B", "1F48D", "1F48E", "1F464", "1F465", "1F4AC", "1F463", "1F4AD", "1F436", "1F43A", "1F431", "1F42D", "1F439", "1F430", "1F438", "1F42F", "1F428", "1F43B", "1F437", "1F43D", "1F42E", "1F417", "1F435", "1F412", "1F434", "1F411", "1F418", "1F43C", "1F427",
         		"1F426", "1F424", "1F425", "1F423", "1F414", "1F40D", "1F422", "1F41B", "1F41D", "1F41C", "1F41E", "1F40C", "1F419", "1F41A", "1F420", "1F41F", "1F42C", "1F433", "1F40B", "1F404", "1F40F", "1F400", "1F403", "1F405", "1F407", "1F409", "1F40E", "1F410", "1F413", "1F415", "1F416", "1F401", "1F402", "1F432", "1F421", "1F40A", "1F42B", "1F42A", "1F406", "1F408", "1F429", "1F43E", "1F490", "1F338", "1F337", "1F340", "1F339", "1F33B", "1F33A", "1F341", "1F343", "1F342", "1F33F", "1F33E", "1F344", "1F335", "1F334", "1F332", "1F333", "1F330", "1F331", "1F33C", "1F310", "1F31E", "1F31D", "1F31A", "1F311", "1F312", "1F313", "1F314", "1F315", "1F316", "1F317", "1F318", "1F31C", "1F31B", "1F319", "1F30D", "1F30E", "1F30F", "1F30B", "1F30C", "1F320", "2B50", "2600", "26C5", "2601", "26A1", "2614", "2744", "26C4", "1F300", "1F301", "1F308", "1F30A", "1F3E0", "1F3E1", "1F3EB", "1F3E2", "1F3E3", "1F3E5", "1F3E6", "1F3EA", "1F3E9", "1F3E8", 
         		"1F492", "26EA", "1F3EC", "1F3E4", "1F307", "1F306", "1F3EF", "1F3F0", "26FA", "1F3ED", "1F5FC", "1F5FE", "1F5FB", "1F304", "1F305", "1F303", "1F5FD", "1F309", "1F3A0", "1F3A1", "26F2", "1F3A2", "1F6A2", "26F5", "1F6A4", "1F6A3", "2693", "1F680", "2708", "1F4BA", "1F681", "1F682", "1F68A", "1F689", "1F69E", "1F686", "1F684", "1F685", "1F688", "1F687", "1F69D", "1F68B", "1F683", "1F68E", "1F68C", "1F68D", "1F699", "1F698", "1F697", "1F695", "1F696", "1F69B", "1F69A", "1F6A8", "1F693", "1F694", "1F692", "1F691", "1F690", "1F6B2", "1F6A1", "1F69F", "1F6A0", "1F69C", "1F488", "1F68F", "1F3AB", "1F6A6", "1F6A5", "26A0", "1F6A7", "1F530", "26FD", "1F3EE", "1F3B0", "2668", "1F5FF", "1F3AA", "1F3AD", "1F4CD", "1F6A9", "1F1EF_1F1F5", "1F1F0_1F1F7", "1F1E9_1F1EA", "1F1E8_1F1F3", "1F1FA_1F1F8", "1F1EB_1F1F7", "1F1EA_1F1F8", "1F1EE_1F1F9", "1F1F7_1F1FA", "1F1EC_1F1E7", "1F38D", "1F49D", "1F38E", "1F392", "1F393", "1F38F", "1F386",
         		"1F387", "1F390", "1F391", "1F383", "1F47B", "1F385", "1F384", "1F381", "1F38B", "1F389", "1F38A", "1F388", "1F38C", "1F52E", "1F3A5", "1F4F7", "1F4F9", "1F4FC", "1F4BF", "1F4C0", "1F4BD", "1F4BE", "1F4BB", "1F4F1", "260E", "1F4DE", "1F4DF", "1F4E0", "1F4E1", "1F4FA", "1F4FB", "1F50A", "1F509", "1F508", "1F507", "1F514", "1F515", "1F4E2", "1F4E3", "23F3", "231B", "23F0", "231A", "1F513", "1F512", "1F50F", "1F510", "1F511", "1F50E", "1F4A1", "1F526", "1F506", "1F505", "1F50C", "1F50B", "1F50D", "1F6C1", "1F6C0", "1F6BF", "1F6BD", "1F527", "1F529", "1F528", "1F6AA", "1F6AC", "1F4A3", "1F52B", "1F52A", "1F48A", "1F489", "1F4B0", "1F4B4", "1F4B5", "1F4B7", "1F4B6", "1F4B3", "1F4B8", "1F4F2", "1F4E7", "1F4E5", "1F4E4", "2709", "1F4E9", "1F4E8", "1F4EF", "1F4EB", "1F4EA", "1F4EC", "1F4ED", "1F4EE", "1F4E6", "1F4DD", "1F4C4", "1F4C3", "1F4D1", "1F4CA", "1F4C8", "1F4C9", "1F4DC", "1F4CB", "1F4C5", "1F4C6", "1F4C7", "1F4C1",
         		"1F4C2", "2702", "1F4CC", "1F4CE", "2712", "270F", "1F4CF", "1F4D0", "1F4D5", "1F4D7", "1F4D8", "1F4D9", "1F4D3", "1F4D4", "1F4D2", "1F4DA", "1F4D6", "1F516", "1F4DB", "1F52C", "1F52D", "1F4F0", "1F3A8", "1F3AC", "1F3A4", "1F3A7", "1F3BC", "1F3B5", "1F3B6", "1F3B9", "1F3BB", "1F3BA", "1F3B7", "1F3B8", "1F47E", "1F3AE", "1F0CF", "1F3B4", "1F004", "1F3B2", "1F3AF", "1F3C8", "1F3C0", "26BD", "26BE", "1F3BE", "1F3B1", "1F3C9", "1F3B3", "26F3", "1F6B5", "1F6B4", "1F3C1", "1F3C7", "1F3C6", "1F3BF", "1F3C2", "1F3CA", "1F3C4", "1F3A3", "2615", "1F375", "1F376", "1F37C", "1F37A", "1F37B", "1F378", "1F379", "1F377", "1F374", "1F355", "1F354", "1F35F", "1F357", "1F356", "1F35D", "1F35B", "1F364", "1F371", "1F363", "1F365", "1F359", "1F358", "1F35A", "1F35C", "1F372", "1F362", "1F361", "1F373", "1F35E", "1F369", "1F36E", "1F366", "1F368", "1F367", "1F382", "1F370", "1F36A", "1F36B", "1F36C", "1F36D", "1F36F", "1F34E", "1F34F",
         		"1F34A", "1F34B", "1F352", "1F347", "1F349", "1F353", "1F351", "1F348", "1F34C", "1F350", "1F34D", "1F360", "1F346", "1F345", "1F33D", "0031_20E3", "0032_20E3", "0033_20E3", "0034_20E3", "0035_20E3", "0036_20E3", "0037_20E3", "0038_20E3", "0039_20E3", "0030_20E3", "1F51F", "1F522", "0023_20E3", "1F523", "2B06", "2B07", "2B05", "27A1", "1F520", "1F521", "1F524", "2197", "2196", "2198", "2199", "2194", "2195", "1F504", "25C0", "25B6", "1F53C", "1F53D", "21A9", "21AA", "2139", "23EA", "23E9", "23EB", "23EC", "2935", "2934", "1F197", "1F500", "1F501", "1F502", "1F195", "1F199", "1F192", "1F193", "1F196", "1F4F6", "1F3A6", "1F201", "1F22F", "1F233", "1F235", "1F234", "1F232", "1F250", "1F239", "1F23A", "1F236", "1F21A", "1F6BB", "1F6B9", "1F6BA", "1F6BC", "1F6BE", "1F6B0", "1F6AE", "1F17F", "267F", "1F6AD", "1F237", "1F238", "1F202", "24C2", "1F6C2", "1F6C4", "1F6C5", "1F6C3", "1F251", "3299", "3297", "1F191", "1F198",
         		"1F194", "1F6AB", "1F51E", "1F4F5", "1F6AF", "1F6B1", "1F6B3", "1F6B7", "1F6B8", "26D4", "2733", "2747", "274E", "2705", "2734", "1F49F", "1F19A", "1F4F3", "1F4F4", "1F170", "1F171", "1F18E", "1F17E", "1F4A0", "27BF", "267B", "2648", "2649", "264A", "264B", "264C", "264D", "264E", "264F", "2650", "2651", "2652", "2653", "26CE", "1F52F", "1F3E7", "1F4B9", "1F4B2", "1F4B1", "00A9", "00AE", "2122", "303D", "3030", "1F51D", "1F51A", "1F519", "1F51B", "1F51C", "274C", "2B55", "2757", "2753", "2755", "2754", "1F503", "1F55B", "1F567", "1F550", "1F55C", "1F551", "1F55D", "1F552", "1F55E", "1F553", "1F55F", "1F554", "1F560", "1F555", "1F556", "1F557", "1F558", "1F559", "1F55A", "1F561", "1F562", "1F563", "1F564", "1F565", "1F566", "2716", "2795", "2796", "2797", "2660", "2665", "2663", "2666", "1F4AE", "1F4AF", "2714", "2611", "1F518", "1F517", "27B0", "1F531", "1F532", "1F533", "25FC", "25FB", "25FE", "25FD", "25AA", 
         		"25AB", "1F53A", "2B1C", "2B1B", "26AB", "26AA", "1F534", "1F535", "1F53B", "1F536", "1F537", "1F538", "1F539", "2049", "203C");

	foreach ($emojis as $emoji) {
		if ($span == true){
			$txt = str_replace (unichr($emoji), '<span class="emoji emoji-'.$emoji.'"></span>', $txt);
		}else{
			$txt = str_replace (unichr($emoji), '##'.$emoji.'##', $txt);    
		}
	}
	return $txt;
}
function wa_pbkdf2($algorithm, $password, $salt, $count, $key_length, $raw_output = false)
{
    $algorithm = strtolower($algorithm);
    if (!in_array($algorithm, hash_algos(), true)) {
        die('PBKDF2 ERROR: Invalid hash algorithm.');
    }
    if ($count <= 0 || $key_length <= 0) {
        die('PBKDF2 ERROR: Invalid parameters.');
    }

    $hash_length = strlen(hash($algorithm, "", true));
    $block_count = ceil($key_length / $hash_length);

    $output = "";
    for ($i = 1; $i <= $block_count; $i++) {
        $last = $salt . pack("N", $i);
        $last = $xorsum = hash_hmac($algorithm, $last, $password, true);
        for ($j = 1; $j < $count; $j++) {
            $xorsum ^= ($last = hash_hmac($algorithm, $last, $password, true));
        }
        $output .= $xorsum;
    }

    if ($raw_output) {
        return substr($output, 0, $key_length);
    } else {
        return bin2hex(substr($output, 0, $key_length));
    }
}

function preprocessProfilePicture($path)
{
    list($width, $height) = getimagesize($path);
    if ($width != $height) {
        throw new Exception("Profile picture needs to be square (image is $width x $height)");
    }
    if ($width > 640) {
        throw new Exception("Profile picture maximum size of 640 x 640 (image is $width x $height)");
    }
    $img = imagecreatefromjpeg($path);
    unlink($path);
    imagejpeg($img, $path, 50);
    imagedestroy($img);
}

function createIcon($file)
{
    // @todo: Add support for others methods.
    if (class_exists("Imagick")) {
        $img = new Imagick();
        $img->readImageBlob(file_get_contents($file));
        $img->thumbnailImage(100, 100, true);

        return base64_encode($img);
    } elseif (extension_loaded('gd')) {
        return createIconGD($file);
    } else {
        return giftThumbnail();
    }
}

function createIconGD($file, $size = 100, $raw = false)
{
    list($width, $height) = getimagesize($file);
    if ($width > $height) {
        //landscape
        $nheight = ($height / $width) * $size;
        $nwidth = $size;
    } else {
        $nwidth = ($width / $height) * $size;
        $nheight = $size;
    }
    $image_p = imagecreatetruecolor($nwidth, $nheight);
    $image = imagecreatefromjpeg($file);
    imagecopyresampled($image_p, $image, 0, 0, 0, 0, $nwidth, $nheight, $width, $height);
    ob_start();
    imagejpeg($image_p);
    $i = ob_get_contents();
    ob_end_clean();
    if ($raw) {
        return $i;
    } else {
        return base64_encode($i);
    }
}

function createVideoIcon($file)
{
    // @todo: Add support for video thumbnail create.
    // @see: http://stackoverflow.com/questions/14662027/generate-thumbnail-for-a-bunch-of-mp4-video-in-a-folder
    return giftThumbnail();
}

function giftThumbnail()
{
    return '';
}

function videoThumbnail()
{
    return '/9j/4QAYRXhpZgAASUkqAAgAAAAAAAAAAAAAAP/sABFEdWNreQABAAQAAABQAAD/4QMpaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/PiA8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjAtYzA2MCA2MS4xMzQ3NzcsIDIwMTAvMDIvMTItMTc6MzI6MDAgICAgICAgICI+IDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+IDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiIHhtbG5zOnhtcD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLyIgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iIHhtbG5zOnN0UmVmPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvc1R5cGUvUmVzb3VyY2VSZWYjIiB4bXA6Q3JlYXRvclRvb2w9IkFkb2JlIFBob3Rvc2hvcCBDUzUgV2luZG93cyIgeG1wTU06SW5zdGFuY2VJRD0ieG1wLmlpZDo2MTQyRUVCOEI3MDgxMUUyQjNGQkY1OEU5M0U2MDE1MyIgeG1wTU06RG9jdW1lbnRJRD0ieG1wLmRpZDo2MTQyRUVCOUI3MDgxMUUyQjNGQkY1OEU5M0U2MDE1MyI+IDx4bXBNTTpEZXJpdmVkRnJvbSBzdFJlZjppbnN0YW5jZUlEPSJ4bXAuaWlkOjYxNDJFRUI2QjcwODExRTJCM0ZCRjU4RTkzRTYwMTUzIiBzdFJlZjpkb2N1bWVudElEPSJ4bXAuZGlkOjYxNDJFRUI3QjcwODExRTJCM0ZCRjU4RTkzRTYwMTUzIi8+IDwvcmRmOkRlc2NyaXB0aW9uPiA8L3JkZjpSREY+IDwveDp4bXBtZXRhPiA8P3hwYWNrZXQgZW5kPSJyIj8+/+4ADkFkb2JlAGTAAAAAAf/bAIQAAgICAgICAgICAgMCAgIDBAMCAgME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';
}

// Creates the correct unicode character from the unicode code point
function unichr($int)
{
	$string = null;
	$multiChars = explode('_', $int);
		foreach ($multiChars as $char) {
		$string .= mb_convert_encoding('&#' . intval($char, 16) . ';', 'UTF-8', 'HTML-ENTITIES');
	}
	return $string;
}
